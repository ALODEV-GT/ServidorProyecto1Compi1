
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package midik.cup;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\361\000\002\002\004\000\002\147\004\000\002\147" +
    "\003\000\002\147\002\000\002\002\004\000\002\002\003" +
    "\000\002\003\004\000\002\003\003\000\002\004\004\000" +
    "\002\004\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\003\000\002\007\003\000\002\017\004\000\002\017\003" +
    "\000\002\017\004\000\002\020\005\000\002\024\004\000" +
    "\002\024\002\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\022\004\000\002\022\003\000\002\023\004" +
    "\000\002\023\002\000\002\025\004\000\002\026\004\000" +
    "\002\026\003\000\002\027\004\000\002\027\003\000\002" +
    "\047\005\000\002\047\004\000\002\047\005\000\002\047" +
    "\004\000\002\047\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\002\000\002\040\005\000\002\040\005\000" +
    "\002\036\003\000\002\036\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\034\003" +
    "\000\002\034\003\000\002\034\005\000\002\030\004\000" +
    "\002\030\003\000\002\031\004\000\002\031\003\000\002" +
    "\032\004\000\002\032\003\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\051\004\000\002\051\002\000\002\033\004\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\043\004\000\002\043\002\000\002\044" +
    "\004\000\002\044\003\000\002\045\004\000\002\045\003" +
    "\000\002\046\003\000\002\052\004\000\002\053\004\000" +
    "\002\053\003\000\002\054\004\000\002\054\003\000\002" +
    "\055\004\000\002\055\003\000\002\056\004\000\002\056" +
    "\003\000\002\057\004\000\002\057\003\000\002\060\003" +
    "\000\002\061\004\000\002\062\004\000\002\062\003\000" +
    "\002\063\004\000\002\063\003\000\002\064\004\000\002" +
    "\065\004\000\002\065\003\000\002\066\004\000\002\066" +
    "\003\000\002\067\004\000\002\067\003\000\002\070\004" +
    "\000\002\070\003\000\002\071\003\000\002\071\003\000" +
    "\002\072\004\000\002\073\004\000\002\073\003\000\002" +
    "\074\004\000\002\074\003\000\002\075\004\000\002\075" +
    "\003\000\002\076\004\000\002\076\003\000\002\077\004" +
    "\000\002\077\003\000\002\100\003\000\002\101\010\000" +
    "\002\103\004\000\002\103\004\000\002\103\005\000\002" +
    "\102\005\000\002\102\005\000\002\102\005\000\002\102" +
    "\003\000\002\102\003\000\002\104\003\000\002\104\003" +
    "\000\002\104\003\000\002\105\004\000\002\106\004\000" +
    "\002\106\003\000\002\107\004\000\002\107\003\000\002" +
    "\110\004\000\002\110\003\000\002\111\004\000\002\111" +
    "\003\000\002\112\003\000\002\112\003\000\002\113\005" +
    "\000\002\113\004\000\002\113\003\000\002\114\004\000" +
    "\002\115\003\000\002\115\003\000\002\116\004\000\002" +
    "\116\003\000\002\117\004\000\002\117\003\000\002\120" +
    "\004\000\002\120\002\000\002\121\003\000\002\121\003" +
    "\000\002\122\004\000\002\123\004\000\002\123\003\000" +
    "\002\140\004\000\002\140\003\000\002\141\004\000\002" +
    "\142\004\000\002\142\003\000\002\143\004\000\002\143" +
    "\003\000\002\144\004\000\002\144\003\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\003\000" +
    "\002\145\003\000\002\145\004\000\002\011\004\000\002" +
    "\011\003\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\005\000\002\013\004\000\002\013\003\000" +
    "\002\146\003\000\002\146\003\000\002\014\003\000\002" +
    "\014\005\000\002\014\003\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\003\000\002\016\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\124" +
    "\004\000\002\125\004\000\002\125\003\000\002\126\004" +
    "\000\002\127\004\000\002\127\003\000\002\130\004\000" +
    "\002\130\003\000\002\131\003\000\002\132\004\000\002" +
    "\133\004\000\002\133\003\000\002\134\004\000\002\135" +
    "\004\000\002\135\003\000\002\136\004\000\002\136\003" +
    "\000\002\137\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\014\002\ufffe\003\005\004\004\005\013\010" +
    "\011\001\002\000\006\003\u0173\056\u0171\001\002\000\014" +
    "\002\ufffc\003\ufffc\004\ufffc\005\ufffc\010\ufffc\001\002\000" +
    "\014\002\ufffe\003\005\004\004\005\013\010\011\001\002" +
    "\000\004\002\u016f\001\002\000\004\002\uff4e\001\002\000" +
    "\006\003\016\056\015\001\002\000\004\002\uffff\001\002" +
    "\000\004\010\011\001\002\000\004\002\uff4f\001\002\000" +
    "\006\003\020\032\022\001\002\000\004\002\uff4b\001\002" +
    "\000\004\002\uff4d\001\002\000\004\002\uff49\001\002\000" +
    "\004\002\uff4c\001\002\000\032\005\024\006\025\007\030" +
    "\011\023\012\026\013\031\014\034\015\043\024\042\033" +
    "\032\056\037\071\027\001\002\000\006\003\045\056\044" +
    "\001\002\000\022\011\023\012\026\013\031\014\034\015" +
    "\043\024\042\056\037\071\027\001\002\000\022\011\023" +
    "\012\026\013\031\014\034\015\043\024\042\056\037\071" +
    "\027\001\002\000\006\003\045\056\044\001\002\000\004" +
    "\056\u0169\001\002\000\022\011\023\012\026\013\031\014" +
    "\034\015\043\024\042\056\037\071\027\001\002\000\006" +
    "\003\045\056\044\001\002\000\004\002\uff47\001\002\000" +
    "\032\005\uff3f\006\uff3f\007\uff3f\011\uff3f\012\uff3f\013\uff3f" +
    "\014\uff3f\015\uff3f\024\uff3f\033\uff3f\056\uff3f\071\uff3f\001" +
    "\002\000\006\003\045\056\044\001\002\000\032\005\uff42" +
    "\006\uff42\007\uff42\011\uff42\012\uff42\013\uff42\014\uff42\015" +
    "\uff42\024\uff42\033\uff42\056\uff42\071\uff42\001\002\000\032" +
    "\005\024\006\025\007\030\011\023\012\026\013\031\014" +
    "\034\015\043\024\042\033\032\056\037\071\027\001\002" +
    "\000\010\003\045\034\u0157\056\044\001\002\000\004\002" +
    "\uff4a\001\002\000\032\005\uff43\006\uff43\007\uff43\011\uff43" +
    "\012\uff43\013\uff43\014\uff43\015\uff43\024\uff43\033\uff43\056" +
    "\uff43\071\uff43\001\002\000\020\011\023\012\026\013\031" +
    "\014\034\015\043\056\212\071\027\001\002\000\006\003" +
    "\045\056\044\001\002\000\012\003\050\027\054\034\051" +
    "\045\047\001\002\000\052\005\uff36\006\uff36\007\uff36\011" +
    "\uff36\012\uff36\013\uff36\014\uff36\015\uff36\016\uff36\020\uff36" +
    "\021\uff36\022\uff36\023\uff36\024\uff36\025\uff36\033\uff36\056" +
    "\uff36\066\uff36\067\uff36\071\uff36\001\002\000\052\005\uff3b" +
    "\006\uff3b\007\uff3b\011\uff3b\012\uff3b\013\uff3b\014\uff3b\015" +
    "\uff3b\016\uff3b\020\uff3b\021\uff3b\022\uff3b\023\uff3b\024\uff3b" +
    "\025\uff3b\033\uff3b\056\uff3b\066\uff3b\067\uff3b\071\uff3b\001" +
    "\002\000\024\003\354\034\355\057\346\060\345\061\344" +
    "\062\350\063\353\064\356\065\352\001\002\000\052\005" +
    "\uff31\006\uff31\007\uff31\011\uff31\012\uff31\013\uff31\014\uff31" +
    "\015\uff31\016\uff31\020\uff31\021\uff31\022\uff31\023\uff31\024" +
    "\uff31\025\uff31\033\uff31\056\uff31\066\uff31\067\uff31\071\uff31" +
    "\001\002\000\022\003\066\011\056\012\057\013\062\014" +
    "\063\015\067\035\uffeb\056\064\001\002\000\052\005\uff35" +
    "\006\uff35\007\uff35\011\uff35\012\uff35\013\uff35\014\uff35\015" +
    "\uff35\016\uff35\020\uff35\021\uff35\022\uff35\023\uff35\024\uff35" +
    "\025\uff35\033\uff35\056\uff35\066\uff35\067\uff35\071\uff35\001" +
    "\002\000\052\005\uff37\006\uff37\007\uff37\011\uff37\012\uff37" +
    "\013\uff37\014\uff37\015\uff37\016\uff37\020\uff37\021\uff37\022" +
    "\uff37\023\uff37\024\uff37\025\uff37\033\uff37\056\uff37\066\uff37" +
    "\067\uff37\071\uff37\001\002\000\052\005\uff33\006\uff33\007" +
    "\uff33\011\uff33\012\uff33\013\uff33\014\uff33\015\uff33\016\uff33" +
    "\020\uff33\021\uff33\022\uff33\023\uff33\024\uff33\025\uff33\033" +
    "\uff33\056\uff33\066\uff33\067\uff33\071\uff33\001\002\000\052" +
    "\005\uff34\006\uff34\007\uff34\011\uff34\012\uff34\013\uff34\014" +
    "\uff34\015\uff34\016\uff34\020\uff34\021\uff34\022\uff34\023\uff34" +
    "\024\uff34\025\uff34\033\uff34\056\uff34\066\uff34\067\uff34\071" +
    "\uff34\001\002\000\006\003\072\056\070\001\002\000\006" +
    "\003\072\056\070\001\002\000\052\005\uff22\006\uff22\007" +
    "\uff22\011\uff22\012\uff22\013\uff22\014\uff22\015\uff22\016\uff22" +
    "\020\uff22\021\uff22\022\uff22\023\uff22\024\uff22\025\uff22\033" +
    "\uff22\056\uff22\066\uff22\067\uff22\071\uff22\001\002\000\004" +
    "\035\102\001\002\000\006\003\072\056\070\001\002\000" +
    "\006\003\072\056\070\001\002\000\006\003\072\056\070" +
    "\001\002\000\020\011\056\012\057\013\062\014\063\015" +
    "\067\035\uffeb\056\064\001\002\000\052\005\uff20\006\uff20" +
    "\007\uff20\011\uff20\012\uff20\013\uff20\014\uff20\015\uff20\016" +
    "\uff20\020\uff20\021\uff20\022\uff20\023\uff20\024\uff20\025\uff20" +
    "\033\uff20\056\uff20\066\uff20\067\uff20\071\uff20\001\002\000" +
    "\006\003\072\056\070\001\002\000\022\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\031\073\035\uffe1\056\uffe1\001" +
    "\002\000\020\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\035\uffe7\056\uffe7\001\002\000\020\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\035\uffe3\056\uffe3\001\002\000\016" +
    "\011\056\012\057\013\062\014\063\015\067\056\064\001" +
    "\002\000\020\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\035\uffe4\056\uffe4\001\002\000\020\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\035\uffe2\056\uffe2\001\002\000\004" +
    "\035\uffec\001\002\000\020\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\035\uffe5\056\uffe5\001\002\000\020\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\035\uffe6\056\uffe6\001" +
    "\002\000\020\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\035\uffe8\056\uffe8\001\002\000\006\003\104\032\106\001" +
    "\002\000\052\005\uff21\006\uff21\007\uff21\011\uff21\012\uff21" +
    "\013\uff21\014\uff21\015\uff21\016\uff21\020\uff21\021\uff21\022" +
    "\uff21\023\uff21\024\uff21\025\uff21\033\uff21\056\uff21\066\uff21" +
    "\067\uff21\071\uff21\001\002\000\052\005\uff1d\006\uff1d\007" +
    "\uff1d\011\uff1d\012\uff1d\013\uff1d\014\uff1d\015\uff1d\016\uff1d" +
    "\020\uff1d\021\uff1d\022\uff1d\023\uff1d\024\uff1d\025\uff1d\033" +
    "\uff1d\056\uff1d\066\uff1d\067\uff1d\071\uff1d\001\002\000\052" +
    "\005\uff1f\006\uff1f\007\uff1f\011\uff1f\012\uff1f\013\uff1f\014" +
    "\uff1f\015\uff1f\016\uff1f\020\uff1f\021\uff1f\022\uff1f\023\uff1f" +
    "\024\uff1f\025\uff1f\033\uff1f\056\uff1f\066\uff1f\067\uff1f\071" +
    "\uff1f\001\002\000\040\003\121\011\023\012\026\013\031" +
    "\014\034\015\043\016\114\020\125\021\110\022\116\023" +
    "\113\024\122\033\uffb9\056\115\071\027\001\002\000\044" +
    "\011\023\012\026\013\031\014\034\015\043\016\114\020" +
    "\125\021\110\022\116\023\113\024\122\025\uffb9\033\uffb9" +
    "\056\115\066\uffb9\067\uffb9\071\027\001\002\000\006\003" +
    "\u013f\034\u0141\001\002\000\044\011\023\012\026\013\031" +
    "\014\034\015\043\016\114\020\125\021\110\022\116\023" +
    "\113\024\122\025\uffb9\033\uffb9\056\115\066\uffb9\067\uffb9" +
    "\071\027\001\002\000\044\011\023\012\026\013\031\014" +
    "\034\015\043\016\114\020\125\021\110\022\116\023\113" +
    "\024\122\025\uffb9\033\uffb9\056\115\066\uffb9\067\uffb9\071" +
    "\027\001\002\000\006\003\u0115\034\u0117\001\002\000\006" +
    "\003\372\034\373\001\002\000\010\003\045\045\342\056" +
    "\044\001\002\000\006\003\216\032\220\001\002\000\052" +
    "\005\uff1e\006\uff1e\007\uff1e\011\uff1e\012\uff1e\013\uff1e\014" +
    "\uff1e\015\uff1e\016\uff1e\020\uff1e\021\uff1e\022\uff1e\023\uff1e" +
    "\024\uff1e\025\uff1e\033\uff1e\056\uff1e\066\uff1e\067\uff1e\071" +
    "\uff1e\001\002\000\044\011\023\012\026\013\031\014\034" +
    "\015\043\016\114\020\125\021\110\022\116\023\113\024" +
    "\122\025\uffb9\033\uffb9\056\115\066\uffb9\067\uffb9\071\027" +
    "\001\002\000\052\005\uff1b\006\uff1b\007\uff1b\011\uff1b\012" +
    "\uff1b\013\uff1b\014\uff1b\015\uff1b\016\uff1b\020\uff1b\021\uff1b" +
    "\022\uff1b\023\uff1b\024\uff1b\025\uff1b\033\uff1b\056\uff1b\066" +
    "\uff1b\067\uff1b\071\uff1b\001\002\000\020\011\023\012\026" +
    "\013\031\014\034\015\043\056\212\071\027\001\002\000" +
    "\004\033\211\001\002\000\044\011\023\012\026\013\031" +
    "\014\034\015\043\016\114\020\125\021\110\022\116\023" +
    "\113\024\122\025\uffb9\033\uffb9\056\115\066\uffb9\067\uffb9" +
    "\071\027\001\002\000\006\003\132\034\133\001\002\000" +
    "\044\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\033" +
    "\uffef\056\uffef\066\uffef\067\uffef\071\uffef\001\002\000\044" +
    "\011\023\012\026\013\031\014\034\015\043\016\114\020" +
    "\125\021\110\022\116\023\113\024\122\025\uffb9\033\uffb9" +
    "\056\115\066\uffb9\067\uffb9\071\027\001\002\000\012\025" +
    "\uffbb\033\uffbb\066\uffbb\067\uffbb\001\002\000\044\011\uff83" +
    "\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83\020\uff83\021" +
    "\uff83\022\uff83\023\uff83\024\uff83\025\uff83\033\uff83\056\uff83" +
    "\066\uff83\067\uff83\071\uff83\001\002\000\044\011\uff81\012" +
    "\uff81\013\uff81\014\uff81\015\uff81\016\uff81\020\uff81\021\uff81" +
    "\022\uff81\023\uff81\024\uff81\025\uff81\033\uff81\056\uff81\066" +
    "\uff81\067\uff81\071\uff81\001\002\000\024\003\136\011\023" +
    "\012\026\013\031\014\034\015\043\024\122\056\115\071" +
    "\027\001\002\000\006\003\175\035\176\001\002\000\044" +
    "\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\020" +
    "\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\033\uff82" +
    "\056\uff82\066\uff82\067\uff82\071\uff82\001\002\000\044\011" +
    "\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\016\uff7f\020\uff7f" +
    "\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f\033\uff7f\056" +
    "\uff7f\066\uff7f\067\uff7f\071\uff7f\001\002\000\004\056\140" +
    "\001\002\000\016\042\144\043\147\044\146\046\142\047" +
    "\143\050\145\001\002\000\014\003\151\034\153\056\150" +
    "\057\156\060\155\001\002\000\022\003\uffb5\034\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\064\uffb5\065\uffb5\001\002" +
    "\000\022\003\uffb3\034\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\064\uffb3\065\uffb3\001\002\000\022\003\uffb2\034\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\064\uffb2\065\uffb2\001" +
    "\002\000\022\003\uffb7\034\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\064\uffb7\065\uffb7\001\002\000\022\003\uffb4\034" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\064\uffb4\065\uffb4" +
    "\001\002\000\022\003\uffb6\034\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\061\uffb6\064\uffb6\065\uffb6\001\002\000\014\003\uff6e" +
    "\027\uff6e\035\uff6e\036\uff6e\037\uff6e\001\002\000\014\003" +
    "\uff6f\027\uff6f\035\uff6f\036\uff6f\037\uff6f\001\002\000\014" +
    "\003\uff70\027\uff70\035\uff70\036\uff70\037\uff70\001\002\000" +
    "\014\003\151\034\153\056\150\057\156\060\155\001\002" +
    "\000\010\027\161\036\157\037\160\001\002\000\014\003" +
    "\uff6c\027\uff6c\035\uff6c\036\uff6c\037\uff6c\001\002\000\014" +
    "\003\uff6d\027\uff6d\035\uff6d\036\uff6d\037\uff6d\001\002\000" +
    "\014\003\151\034\153\056\150\057\156\060\155\001\002" +
    "\000\014\003\151\034\153\056\150\057\156\060\155\001" +
    "\002\000\004\056\162\001\002\000\010\045\165\054\166" +
    "\055\164\001\002\000\006\003\uff77\035\uff77\001\002\000" +
    "\006\003\uff75\035\uff75\001\002\000\014\003\151\034\153" +
    "\056\150\057\156\060\155\001\002\000\006\003\uff76\035" +
    "\uff76\001\002\000\012\003\uff74\035\uff74\036\157\037\160" +
    "\001\002\000\014\003\uff72\027\uff72\035\uff72\036\uff72\037" +
    "\uff72\001\002\000\014\003\uff73\027\uff73\035\uff73\036\uff73" +
    "\037\uff73\001\002\000\010\035\173\036\157\037\160\001" +
    "\002\000\014\003\uff71\027\uff71\035\uff71\036\uff71\037\uff71" +
    "\001\002\000\044\011\uff80\012\uff80\013\uff80\014\uff80\015" +
    "\uff80\016\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80" +
    "\025\uff80\033\uff80\056\uff80\066\uff80\067\uff80\071\uff80\001" +
    "\002\000\044\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d" +
    "\016\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025" +
    "\uff7d\033\uff7d\056\uff7d\066\uff7d\067\uff7d\071\uff7d\001\002" +
    "\000\006\003\177\032\200\001\002\000\044\011\uff7b\012" +
    "\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\020\uff7b\021\uff7b" +
    "\022\uff7b\023\uff7b\024\uff7b\025\uff7b\033\uff7b\056\uff7b\066" +
    "\uff7b\067\uff7b\071\uff7b\001\002\000\040\003\203\011\023" +
    "\012\026\013\031\014\034\015\043\016\114\020\125\021" +
    "\110\022\116\023\113\024\122\033\uffb9\056\115\071\027" +
    "\001\002\000\044\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015" +
    "\uff7e\016\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e" +
    "\025\uff7e\033\uff7e\056\uff7e\066\uff7e\067\uff7e\071\uff7e\001" +
    "\002\000\044\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c" +
    "\016\uff7c\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025" +
    "\uff7c\033\uff7c\056\uff7c\066\uff7c\067\uff7c\071\uff7c\001\002" +
    "\000\044\011\uff79\012\uff79\013\uff79\014\uff79\015\uff79\016" +
    "\uff79\020\uff79\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79" +
    "\033\uff79\056\uff79\066\uff79\067\uff79\071\uff79\001\002\000" +
    "\004\033\206\001\002\000\044\011\uff7a\012\uff7a\013\uff7a" +
    "\014\uff7a\015\uff7a\016\uff7a\020\uff7a\021\uff7a\022\uff7a\023" +
    "\uff7a\024\uff7a\025\uff7a\033\uff7a\056\uff7a\066\uff7a\067\uff7a" +
    "\071\uff7a\001\002\000\044\011\uff78\012\uff78\013\uff78\014" +
    "\uff78\015\uff78\016\uff78\020\uff78\021\uff78\022\uff78\023\uff78" +
    "\024\uff78\025\uff78\033\uff78\056\uff78\066\uff78\067\uff78\071" +
    "\uff78\001\002\000\012\025\uffbe\033\uffbe\066\uffbe\067\uffbe" +
    "\001\002\000\052\005\uff1c\006\uff1c\007\uff1c\011\uff1c\012" +
    "\uff1c\013\uff1c\014\uff1c\015\uff1c\016\uff1c\020\uff1c\021\uff1c" +
    "\022\uff1c\023\uff1c\024\uff1c\025\uff1c\033\uff1c\056\uff1c\066" +
    "\uff1c\067\uff1c\071\uff1c\001\002\000\052\005\uff1a\006\uff1a" +
    "\007\uff1a\011\uff1a\012\uff1a\013\uff1a\014\uff1a\015\uff1a\016" +
    "\uff1a\020\uff1a\021\uff1a\022\uff1a\023\uff1a\024\uff1a\025\uff1a" +
    "\033\uff1a\056\uff1a\066\uff1a\067\uff1a\071\uff1a\001\002\000" +
    "\006\003\045\056\044\001\002\000\044\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\033\ufff0\056\ufff0\066\ufff0" +
    "\067\ufff0\071\ufff0\001\002\000\052\005\uff39\006\uff39\007" +
    "\uff39\011\uff39\012\uff39\013\uff39\014\uff39\015\uff39\016\uff39" +
    "\020\uff39\021\uff39\022\uff39\023\uff39\024\uff39\025\uff39\033" +
    "\uff39\056\uff39\066\uff39\067\uff39\071\uff39\001\002\000\012" +
    "\025\uffbc\033\uffbc\066\uffbc\067\uffbc\001\002\000\044\011" +
    "\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\020\uff91" +
    "\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\033\uff91\056" +
    "\uff91\066\uff91\067\uff91\071\uff91\001\002\000\044\011\uff93" +
    "\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\020\uff93\021" +
    "\uff93\022\uff93\023\uff93\024\uff93\025\uff93\033\uff93\056\uff93" +
    "\066\uff93\067\uff93\071\uff93\001\002\000\040\003\222\011" +
    "\023\012\026\013\031\014\034\015\043\016\114\020\125" +
    "\021\110\022\116\023\113\024\122\033\uffb9\056\115\071" +
    "\027\001\002\000\044\011\uff92\012\uff92\013\uff92\014\uff92" +
    "\015\uff92\016\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024" +
    "\uff92\025\uff92\033\uff92\056\uff92\066\uff92\067\uff92\071\uff92" +
    "\001\002\000\044\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f" +
    "\025\uff8f\033\uff8f\056\uff8f\066\uff8f\067\uff8f\071\uff8f\001" +
    "\002\000\004\033\225\001\002\000\044\011\uff90\012\uff90" +
    "\013\uff90\014\uff90\015\uff90\016\uff90\020\uff90\021\uff90\022" +
    "\uff90\023\uff90\024\uff90\025\uff90\033\uff90\056\uff90\066\uff90" +
    "\067\uff90\071\uff90\001\002\000\006\003\226\021\230\001" +
    "\002\000\044\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c" +
    "\016\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025" +
    "\uff8c\033\uff8c\056\uff8c\066\uff8c\067\uff8c\071\uff8c\001\002" +
    "\000\044\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016" +
    "\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e" +
    "\033\uff8e\056\uff8e\066\uff8e\067\uff8e\071\uff8e\001\002\000" +
    "\006\003\231\034\233\001\002\000\044\011\uff8a\012\uff8a" +
    "\013\uff8a\014\uff8a\015\uff8a\016\uff8a\020\uff8a\021\uff8a\022" +
    "\uff8a\023\uff8a\024\uff8a\025\uff8a\033\uff8a\056\uff8a\066\uff8a" +
    "\067\uff8a\071\uff8a\001\002\000\044\011\uff8d\012\uff8d\013" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\033\uff8d\056\uff8d\066\uff8d\067" +
    "\uff8d\071\uff8d\001\002\000\030\003\251\034\252\053\240" +
    "\056\242\057\253\060\236\061\235\062\241\063\250\064" +
    "\246\065\254\001\002\000\044\011\uff8b\012\uff8b\013\uff8b" +
    "\014\uff8b\015\uff8b\016\uff8b\020\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\024\uff8b\025\uff8b\033\uff8b\056\uff8b\066\uff8b\067\uff8b" +
    "\071\uff8b\001\002\000\036\003\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\046\uffab" +
    "\047\uffab\050\uffab\051\uffab\052\uffab\001\002\000\036\003" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\001\002\000\006\003\334\035\335\001\002\000\012" +
    "\034\325\056\322\062\241\063\250\001\002\000\012\003" +
    "\uffc8\035\uffc8\051\uffc8\052\uffc8\001\002\000\016\042\312" +
    "\043\147\044\146\046\142\047\143\050\313\001\002\000" +
    "\026\036\275\037\273\040\274\041\277\042\144\043\147" +
    "\044\146\046\142\047\143\050\145\001\002\000\012\003" +
    "\uffd4\035\uffd4\051\263\052\266\001\002\000\012\003\uffd4" +
    "\035\uffd4\051\263\052\266\001\002\000\036\003\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\001" +
    "\002\000\012\003\uffd4\035\uffd4\051\263\052\266\001\002" +
    "\000\012\003\uffc7\035\uffc7\051\uffc7\052\uffc7\001\002\000" +
    "\044\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88" +
    "\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\033" +
    "\uff88\056\uff88\066\uff88\067\uff88\071\uff88\001\002\000\026" +
    "\034\252\053\240\056\242\057\253\060\236\061\235\062" +
    "\241\063\250\064\246\065\254\001\002\000\036\003\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\001\002\000\036\003\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\046\uffa9\047\uffa9" +
    "\050\uffa9\051\uffa9\052\uffa9\001\002\000\036\003\uffac\035" +
    "\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\001" +
    "\002\000\030\035\300\036\275\037\273\040\274\041\277" +
    "\042\144\043\147\044\146\046\142\047\143\050\145\001" +
    "\002\000\010\035\271\051\263\052\266\001\002\000\010" +
    "\035\265\051\263\052\266\001\002\000\004\035\262\001" +
    "\002\000\012\003\uffc6\035\uffc6\051\uffc6\052\uffc6\001\002" +
    "\000\026\034\252\053\240\056\242\057\253\060\236\061" +
    "\235\062\241\063\250\064\246\065\254\001\002\000\006" +
    "\003\uffd8\035\uffd8\001\002\000\012\003\uffc9\035\uffc9\051" +
    "\uffc9\052\uffc9\001\002\000\026\034\252\053\240\056\242" +
    "\057\253\060\236\061\235\062\241\063\250\064\246\065" +
    "\254\001\002\000\006\003\uffd5\035\uffd5\001\002\000\006" +
    "\003\uffd6\035\uffd6\001\002\000\012\003\uffd2\035\uffd2\051" +
    "\uffd2\052\uffd2\001\002\000\006\003\uffd7\035\uffd7\001\002" +
    "\000\016\034\302\057\253\060\236\061\235\064\246\065" +
    "\254\001\002\000\016\034\302\057\253\060\236\061\235" +
    "\064\246\065\254\001\002\000\016\034\302\057\253\060" +
    "\236\061\235\064\246\065\254\001\002\000\016\034\302" +
    "\057\253\060\236\061\235\064\246\065\254\001\002\000" +
    "\016\034\302\057\253\060\236\061\235\064\246\065\254" +
    "\001\002\000\036\003\uffad\035\uffad\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\001\002\000\036\003\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\001" +
    "\002\000\016\034\302\057\253\060\236\061\235\064\246" +
    "\065\254\001\002\000\014\035\300\036\275\037\273\040" +
    "\274\041\277\001\002\000\022\003\uffd3\035\uffd3\036\275" +
    "\037\273\040\274\041\277\051\uffd3\052\uffd3\001\002\000" +
    "\036\003\uffb1\035\uffb1\036\uffb1\037\uffb1\040\274\041\277" +
    "\042\uffb1\043\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\001\002\000\036\003\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\001\002\000\036" +
    "\003\uffb0\035\uffb0\036\uffb0\037\uffb0\040\274\041\277\042" +
    "\uffb0\043\uffb0\044\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\001\002\000\006\003\uffda\035\uffda\001\002\000" +
    "\020\034\302\056\321\057\253\060\236\061\235\064\246" +
    "\065\254\001\002\000\024\034\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\062\316\063\317\064\uffb2\065\uffb2\001\002" +
    "\000\024\034\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\314\063\315\064\uffb7\065\uffb7\001\002\000\012\003\uffcb" +
    "\035\uffcb\051\uffcb\052\uffcb\001\002\000\012\003\uffca\035" +
    "\uffca\051\uffca\052\uffca\001\002\000\012\003\uffcd\035\uffcd" +
    "\051\uffcd\052\uffcd\001\002\000\012\003\uffcc\035\uffcc\051" +
    "\uffcc\052\uffcc\001\002\000\022\003\uffcf\035\uffcf\036\275" +
    "\037\273\040\274\041\277\051\uffcf\052\uffcf\001\002\000" +
    "\012\003\uffce\035\uffce\051\uffce\052\uffce\001\002\000\012" +
    "\003\uffd1\035\uffd1\051\uffd1\052\uffd1\001\002\000\012\003" +
    "\uffd4\035\uffd4\051\263\052\266\001\002\000\012\003\uffd4" +
    "\035\uffd4\051\263\052\266\001\002\000\026\034\330\053" +
    "\240\056\327\057\253\060\236\061\235\062\241\063\250" +
    "\064\246\065\254\001\002\000\004\035\331\001\002\000" +
    "\020\035\uffd1\042\312\043\147\044\146\046\142\047\143" +
    "\050\313\001\002\000\026\034\330\053\240\056\327\057" +
    "\253\060\236\061\235\062\241\063\250\064\246\065\254" +
    "\001\002\000\012\003\uffd0\035\uffd0\051\uffd0\052\uffd0\001" +
    "\002\000\006\003\uffdb\035\uffdb\001\002\000\006\003\uffd9" +
    "\035\uffd9\001\002\000\044\011\uff86\012\uff86\013\uff86\014" +
    "\uff86\015\uff86\016\uff86\020\uff86\021\uff86\022\uff86\023\uff86" +
    "\024\uff86\025\uff86\033\uff86\056\uff86\066\uff86\067\uff86\071" +
    "\uff86\001\002\000\006\003\337\027\341\001\002\000\044" +
    "\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89\020" +
    "\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\033\uff89" +
    "\056\uff89\066\uff89\067\uff89\071\uff89\001\002\000\044\011" +
    "\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\020\uff84" +
    "\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\033\uff84\056" +
    "\uff84\066\uff84\067\uff84\071\uff84\001\002\000\044\011\uff87" +
    "\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\020\uff87\021" +
    "\uff87\022\uff87\023\uff87\024\uff87\025\uff87\033\uff87\056\uff87" +
    "\066\uff87\067\uff87\071\uff87\001\002\000\044\011\uff85\012" +
    "\uff85\013\uff85\014\uff85\015\uff85\016\uff85\020\uff85\021\uff85" +
    "\022\uff85\023\uff85\024\uff85\025\uff85\033\uff85\056\uff85\066" +
    "\uff85\067\uff85\071\uff85\001\002\000\024\003\354\034\355" +
    "\057\346\060\345\061\344\062\350\063\353\064\356\065" +
    "\352\001\002\000\044\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024" +
    "\uffee\025\uffee\033\uffee\056\uffee\066\uffee\067\uffee\071\uffee" +
    "\001\002\000\022\003\uff29\027\uff29\035\uff29\036\uff29\037" +
    "\uff29\040\uff29\041\uff29\070\uff29\001\002\000\022\003\uff23" +
    "\027\uff23\035\uff23\036\uff23\037\uff23\040\uff23\041\uff23\070" +
    "\uff23\001\002\000\022\003\uff24\027\uff24\035\uff24\036\uff24" +
    "\037\uff24\040\uff24\041\uff24\070\uff24\001\002\000\014\027" +
    "\371\036\360\037\363\040\364\041\362\001\002\000\022" +
    "\003\uff28\027\uff28\035\uff28\036\uff28\037\uff28\040\uff28\041" +
    "\uff28\070\uff28\001\002\000\016\027\uff2b\035\uff2b\036\uff2b" +
    "\037\uff2b\040\uff2b\041\uff2b\001\002\000\022\003\uff25\027" +
    "\uff25\035\uff25\036\uff25\037\uff25\040\uff25\041\uff25\070\uff25" +
    "\001\002\000\022\003\uff27\027\uff27\035\uff27\036\uff27\037" +
    "\uff27\040\uff27\041\uff27\070\uff27\001\002\000\016\027\uff2a" +
    "\035\uff2a\036\uff2a\037\uff2a\040\uff2a\041\uff2a\001\002\000" +
    "\024\003\354\034\355\057\346\060\345\061\344\062\350" +
    "\063\353\064\356\065\352\001\002\000\022\003\uff26\027" +
    "\uff26\035\uff26\036\uff26\037\uff26\040\uff26\041\uff26\070\uff26" +
    "\001\002\000\014\035\361\036\360\037\363\040\364\041" +
    "\362\001\002\000\024\003\354\034\355\057\346\060\345" +
    "\061\344\062\350\063\353\064\356\065\352\001\002\000" +
    "\016\027\uff2c\035\uff2c\036\uff2c\037\uff2c\040\uff2c\041\uff2c" +
    "\001\002\000\024\003\354\034\355\057\346\060\345\061" +
    "\344\062\350\063\353\064\356\065\352\001\002\000\024" +
    "\003\354\034\355\057\346\060\345\061\344\062\350\063" +
    "\353\064\356\065\352\001\002\000\024\003\354\034\355" +
    "\057\346\060\345\061\344\062\350\063\353\064\356\065" +
    "\352\001\002\000\016\027\uff2e\035\uff2e\036\uff2e\037\uff2e" +
    "\040\uff2e\041\uff2e\001\002\000\016\027\uff2f\035\uff2f\036" +
    "\uff2f\037\uff2f\040\364\041\362\001\002\000\016\027\uff2d" +
    "\035\uff2d\036\uff2d\037\uff2d\040\uff2d\041\uff2d\001\002\000" +
    "\016\027\uff30\035\uff30\036\uff30\037\uff30\040\364\041\362" +
    "\001\002\000\044\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\033\uffed\056\uffed\066\uffed\067\uffed\071\uffed\001" +
    "\002\000\044\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\033\uffde\056\uffde\066\uffde\067\uffde\071\uffde\001\002" +
    "\000\030\003\377\034\252\053\240\056\242\057\253\060" +
    "\236\061\235\062\241\063\250\064\246\065\254\001\002" +
    "\000\044\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\033\uffe0\056\uffe0\066\uffe0\067\uffe0\071\uffe0\001\002\000" +
    "\044\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\033" +
    "\uffdf\056\uffdf\066\uffdf\067\uffdf\071\uffdf\001\002\000\006" +
    "\003\u0100\035\u0101\001\002\000\044\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\033\uffdc\056\uffdc\066\uffdc\067" +
    "\uffdc\071\uffdc\001\002\000\044\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\033\uffc4\056\uffc4\066\uffc4\067\uffc4" +
    "\071\uffc4\001\002\000\006\003\u0103\032\u0105\001\002\000" +
    "\044\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\033" +
    "\uffdd\056\uffdd\066\uffdd\067\uffdd\071\uffdd\001\002\000\044" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\033\uffc2" +
    "\056\uffc2\066\uffc2\067\uffc2\071\uffc2\001\002\000\044\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\033\uffc5\056" +
    "\uffc5\066\uffc5\067\uffc5\071\uffc5\001\002\000\040\003\u0107" +
    "\011\023\012\026\013\031\014\034\015\043\016\114\020" +
    "\125\021\110\022\116\023\113\024\122\033\uffb9\056\115" +
    "\071\027\001\002\000\044\011\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\033\uffc3\056\uffc3\066\uffc3\067\uffc3\071" +
    "\uffc3\001\002\000\044\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\033\uffc0\056\uffc0\066\uffc0\067\uffc0\071\uffc0" +
    "\001\002\000\004\033\u010a\001\002\000\044\011\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\033\uffc1\056\uffc1\066" +
    "\uffc1\067\uffc1\071\uffc1\001\002\000\046\011\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\u010b\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\033\uffa5\056\uffa5" +
    "\066\uffa5\067\uffa5\071\uffa5\001\002\000\006\003\u010d\032" +
    "\u010f\001\002\000\044\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\033\uffb8\056\uffb8\066\uffb8\067\uffb8\071\uffb8" +
    "\001\002\000\044\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\025\uffa3\033\uffa3\056\uffa3\066\uffa3\067\uffa3\071\uffa3\001" +
    "\002\000\044\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6" +
    "\016\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025" +
    "\uffa6\033\uffa6\056\uffa6\066\uffa6\067\uffa6\071\uffa6\001\002" +
    "\000\040\003\u0110\011\023\012\026\013\031\014\034\015" +
    "\043\016\114\020\125\021\110\022\116\023\113\024\122" +
    "\033\uffb9\056\115\071\027\001\002\000\044\011\uffa1\012" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\020\uffa1\021\uffa1" +
    "\022\uffa1\023\uffa1\024\uffa1\025\uffa1\033\uffa1\056\uffa1\066" +
    "\uffa1\067\uffa1\071\uffa1\001\002\000\004\033\u0114\001\002" +
    "\000\044\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\033\uffa4\056\uffa4\066\uffa4\067\uffa4\071\uffa4\001\002\000" +
    "\044\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\033" +
    "\uffa2\056\uffa2\066\uffa2\067\uffa2\071\uffa2\001\002\000\044" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\033\uffa0" +
    "\056\uffa0\066\uffa0\067\uffa0\071\uffa0\001\002\000\044\011" +
    "\uff69\012\uff69\013\uff69\014\uff69\015\uff69\016\uff69\020\uff69" +
    "\021\uff69\022\uff69\023\uff69\024\uff69\025\uff69\033\uff69\056" +
    "\uff69\066\uff69\067\uff69\071\uff69\001\002\000\044\011\uff6b" +
    "\012\uff6b\013\uff6b\014\uff6b\015\uff6b\016\uff6b\020\uff6b\021" +
    "\uff6b\022\uff6b\023\uff6b\024\uff6b\025\uff6b\033\uff6b\056\uff6b" +
    "\066\uff6b\067\uff6b\071\uff6b\001\002\000\006\003\u011a\056" +
    "\u0118\001\002\000\006\003\u011c\035\u011d\001\002\000\044" +
    "\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a\020" +
    "\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a\033\uff6a" +
    "\056\uff6a\066\uff6a\067\uff6a\071\uff6a\001\002\000\044\011" +
    "\uff67\012\uff67\013\uff67\014\uff67\015\uff67\016\uff67\020\uff67" +
    "\021\uff67\022\uff67\023\uff67\024\uff67\025\uff67\033\uff67\056" +
    "\uff67\066\uff67\067\uff67\071\uff67\001\002\000\044\011\uff68" +
    "\012\uff68\013\uff68\014\uff68\015\uff68\016\uff68\020\uff68\021" +
    "\uff68\022\uff68\023\uff68\024\uff68\025\uff68\033\uff68\056\uff68" +
    "\066\uff68\067\uff68\071\uff68\001\002\000\044\011\uff65\012" +
    "\uff65\013\uff65\014\uff65\015\uff65\016\uff65\020\uff65\021\uff65" +
    "\022\uff65\023\uff65\024\uff65\025\uff65\033\uff65\056\uff65\066" +
    "\uff65\067\uff65\071\uff65\001\002\000\006\003\u011f\032\u0120" +
    "\001\002\000\044\011\uff66\012\uff66\013\uff66\014\uff66\015" +
    "\uff66\016\uff66\020\uff66\021\uff66\022\uff66\023\uff66\024\uff66" +
    "\025\uff66\033\uff66\056\uff66\066\uff66\067\uff66\071\uff66\001" +
    "\002\000\044\011\uff63\012\uff63\013\uff63\014\uff63\015\uff63" +
    "\016\uff63\020\uff63\021\uff63\022\uff63\023\uff63\024\uff63\025" +
    "\uff63\033\uff63\056\uff63\066\uff63\067\uff63\071\uff63\001\002" +
    "\000\012\003\u0122\033\u0124\066\u0125\067\u0121\001\002\000" +
    "\006\003\u013a\070\u013b\001\002\000\044\011\uff61\012\uff61" +
    "\013\uff61\014\uff61\015\uff61\016\uff61\020\uff61\021\uff61\022" +
    "\uff61\023\uff61\024\uff61\025\uff61\033\uff61\056\uff61\066\uff61" +
    "\067\uff61\071\uff61\001\002\000\004\033\u0138\001\002\000" +
    "\044\011\uff5e\012\uff5e\013\uff5e\014\uff5e\015\uff5e\016\uff5e" +
    "\020\uff5e\021\uff5e\022\uff5e\023\uff5e\024\uff5e\025\uff5e\033" +
    "\uff5e\056\uff5e\066\uff5e\067\uff5e\071\uff5e\001\002\000\022" +
    "\003\u0129\057\346\060\345\061\344\062\350\063\353\064" +
    "\356\065\352\001\002\000\044\011\uff62\012\uff62\013\uff62" +
    "\014\uff62\015\uff62\016\uff62\020\uff62\021\uff62\022\uff62\023" +
    "\uff62\024\uff62\025\uff62\033\uff62\056\uff62\066\uff62\067\uff62" +
    "\071\uff62\001\002\000\044\011\uff64\012\uff64\013\uff64\014" +
    "\uff64\015\uff64\016\uff64\020\uff64\021\uff64\022\uff64\023\uff64" +
    "\024\uff64\025\uff64\033\uff64\056\uff64\066\uff64\067\uff64\071" +
    "\uff64\001\002\000\006\003\uff5c\070\uff5c\001\002\000\006" +
    "\003\uff5b\070\uff5b\001\002\000\010\033\u0124\066\u0125\067" +
    "\u0121\001\002\000\006\003\u012c\070\u012e\001\002\000\010" +
    "\033\uff59\066\uff59\067\uff59\001\002\000\010\033\uff5d\066" +
    "\uff5d\067\uff5d\001\002\000\046\003\u0130\011\023\012\026" +
    "\013\031\014\034\015\043\016\114\020\125\021\110\022" +
    "\116\023\113\024\122\025\uffb9\033\uffb9\056\115\066\uffb9" +
    "\067\uffb9\071\027\001\002\000\010\033\uff5a\066\uff5a\067" +
    "\uff5a\001\002\000\010\033\uff57\066\uff57\067\uff57\001\002" +
    "\000\012\025\u0132\033\uff55\066\uff55\067\uff55\001\002\000" +
    "\006\003\u0134\027\u0136\001\002\000\010\033\uff58\066\uff58" +
    "\067\uff58\001\002\000\010\033\uff53\066\uff53\067\uff53\001" +
    "\002\000\010\033\uff56\066\uff56\067\uff56\001\002\000\010" +
    "\033\uff54\066\uff54\067\uff54\001\002\000\044\011\uff60\012" +
    "\uff60\013\uff60\014\uff60\015\uff60\016\uff60\020\uff60\021\uff60" +
    "\022\uff60\023\uff60\024\uff60\025\uff60\033\uff60\056\uff60\066" +
    "\uff60\067\uff60\071\uff60\001\002\000\044\011\uff5f\012\uff5f" +
    "\013\uff5f\014\uff5f\015\uff5f\016\uff5f\020\uff5f\021\uff5f\022" +
    "\uff5f\023\uff5f\024\uff5f\025\uff5f\033\uff5f\056\uff5f\066\uff5f" +
    "\067\uff5f\071\uff5f\001\002\000\004\033\uff52\001\002\000" +
    "\004\033\uff50\001\002\000\036\011\023\012\026\013\031" +
    "\014\034\015\043\016\114\020\125\021\110\022\116\023" +
    "\113\024\122\033\uffb9\056\115\071\027\001\002\000\004" +
    "\033\uff51\001\002\000\012\025\uffbd\033\uffbd\066\uffbd\067" +
    "\uffbd\001\002\000\012\025\uffba\033\uffba\066\uffba\067\uffba" +
    "\001\002\000\044\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015" +
    "\uff9d\016\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\033\uff9d\056\uff9d\066\uff9d\067\uff9d\071\uff9d\001" +
    "\002\000\044\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025" +
    "\uff9f\033\uff9f\056\uff9f\066\uff9f\067\uff9f\071\uff9f\001\002" +
    "\000\030\003\u0143\034\252\053\240\056\242\057\253\060" +
    "\236\061\235\062\241\063\250\064\246\065\254\001\002" +
    "\000\006\003\u0146\035\u0147\001\002\000\044\011\uff9b\012" +
    "\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\020\uff9b\021\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\uff9b\033\uff9b\056\uff9b\066" +
    "\uff9b\067\uff9b\071\uff9b\001\002\000\044\011\uff9e\012\uff9e" +
    "\013\uff9e\014\uff9e\015\uff9e\016\uff9e\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\033\uff9e\056\uff9e\066\uff9e" +
    "\067\uff9e\071\uff9e\001\002\000\044\011\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\033\uff9c\056\uff9c\066\uff9c\067" +
    "\uff9c\071\uff9c\001\002\000\044\011\uff99\012\uff99\013\uff99" +
    "\014\uff99\015\uff99\016\uff99\020\uff99\021\uff99\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\033\uff99\056\uff99\066\uff99\067\uff99" +
    "\071\uff99\001\002\000\006\003\u0149\032\u014a\001\002\000" +
    "\044\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\033" +
    "\uff9a\056\uff9a\066\uff9a\067\uff9a\071\uff9a\001\002\000\044" +
    "\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\020" +
    "\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\033\uff97" +
    "\056\uff97\066\uff97\067\uff97\071\uff97\001\002\000\040\003" +
    "\u014c\011\023\012\026\013\031\014\034\015\043\016\114" +
    "\020\125\021\110\022\116\023\113\024\122\033\uffb9\056" +
    "\115\071\027\001\002\000\044\011\uff98\012\uff98\013\uff98" +
    "\014\uff98\015\uff98\016\uff98\020\uff98\021\uff98\022\uff98\023" +
    "\uff98\024\uff98\025\uff98\033\uff98\056\uff98\066\uff98\067\uff98" +
    "\071\uff98\001\002\000\044\011\uff95\012\uff95\013\uff95\014" +
    "\uff95\015\uff95\016\uff95\020\uff95\021\uff95\022\uff95\023\uff95" +
    "\024\uff95\025\uff95\033\uff95\056\uff95\066\uff95\067\uff95\071" +
    "\uff95\001\002\000\004\033\u014f\001\002\000\044\011\uff96" +
    "\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\020\uff96\021" +
    "\uff96\022\uff96\023\uff96\024\uff96\025\uff96\033\uff96\056\uff96" +
    "\066\uff96\067\uff96\071\uff96\001\002\000\044\011\uff94\012" +
    "\uff94\013\uff94\014\uff94\015\uff94\016\uff94\020\uff94\021\uff94" +
    "\022\uff94\023\uff94\024\uff94\025\uff94\033\uff94\056\uff94\066" +
    "\uff94\067\uff94\071\uff94\001\002\000\012\025\uffbf\033\uffbf" +
    "\066\uffbf\067\uffbf\001\002\000\020\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\035\uffe9\056\uffe9\001\002\000\020" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\035\uffea\056" +
    "\uffea\001\002\000\014\027\u0154\036\360\037\363\040\364" +
    "\041\362\001\002\000\052\005\uff32\006\uff32\007\uff32\011" +
    "\uff32\012\uff32\013\uff32\014\uff32\015\uff32\016\uff32\020\uff32" +
    "\021\uff32\022\uff32\023\uff32\024\uff32\025\uff32\033\uff32\056" +
    "\uff32\066\uff32\067\uff32\071\uff32\001\002\000\032\005\uff40" +
    "\006\uff40\007\uff40\011\uff40\012\uff40\013\uff40\014\uff40\015" +
    "\uff40\024\uff40\033\uff40\056\uff40\071\uff40\001\002\000\032" +
    "\005\uff41\006\uff41\007\uff41\011\uff41\012\uff41\013\uff41\014" +
    "\uff41\015\uff41\024\uff41\033\uff41\056\uff41\071\uff41\001\002" +
    "\000\022\003\u015a\011\056\012\057\013\062\014\063\015" +
    "\067\035\uffeb\056\064\001\002\000\032\005\uff19\006\uff19" +
    "\007\uff19\011\uff19\012\uff19\013\uff19\014\uff19\015\uff19\024" +
    "\uff19\033\uff19\056\uff19\071\uff19\001\002\000\004\035\u015c" +
    "\001\002\000\032\005\uff17\006\uff17\007\uff17\011\uff17\012" +
    "\uff17\013\uff17\014\uff17\015\uff17\024\uff17\033\uff17\056\uff17" +
    "\071\uff17\001\002\000\032\005\uff18\006\uff18\007\uff18\011" +
    "\uff18\012\uff18\013\uff18\014\uff18\015\uff18\024\uff18\033\uff18" +
    "\056\uff18\071\uff18\001\002\000\006\003\u015d\032\u015f\001" +
    "\002\000\032\005\uff14\006\uff14\007\uff14\011\uff14\012\uff14" +
    "\013\uff14\014\uff14\015\uff14\024\uff14\033\uff14\056\uff14\071" +
    "\uff14\001\002\000\032\005\uff16\006\uff16\007\uff16\011\uff16" +
    "\012\uff16\013\uff16\014\uff16\015\uff16\024\uff16\033\uff16\056" +
    "\uff16\071\uff16\001\002\000\040\003\u0160\011\023\012\026" +
    "\013\031\014\034\015\043\016\114\020\125\021\110\022" +
    "\116\023\113\024\122\033\uffb9\056\115\071\027\001\002" +
    "\000\032\005\uff12\006\uff12\007\uff12\011\uff12\012\uff12\013" +
    "\uff12\014\uff12\015\uff12\024\uff12\033\uff12\056\uff12\071\uff12" +
    "\001\002\000\004\033\u0163\001\002\000\032\005\uff15\006" +
    "\uff15\007\uff15\011\uff15\012\uff15\013\uff15\014\uff15\015\uff15" +
    "\024\uff15\033\uff15\056\uff15\071\uff15\001\002\000\032\005" +
    "\uff11\006\uff11\007\uff11\011\uff11\012\uff11\013\uff11\014\uff11" +
    "\015\uff11\024\uff11\033\uff11\056\uff11\071\uff11\001\002\000" +
    "\032\005\uff13\006\uff13\007\uff13\011\uff13\012\uff13\013\uff13" +
    "\014\uff13\015\uff13\024\uff13\033\uff13\056\uff13\071\uff13\001" +
    "\002\000\004\002\uff48\001\002\000\052\005\uff3a\006\uff3a" +
    "\007\uff3a\011\uff3a\012\uff3a\013\uff3a\014\uff3a\015\uff3a\016" +
    "\uff3a\020\uff3a\021\uff3a\022\uff3a\023\uff3a\024\uff3a\025\uff3a" +
    "\033\uff3a\056\uff3a\066\uff3a\067\uff3a\071\uff3a\001\002\000" +
    "\052\005\uff3c\006\uff3c\007\uff3c\011\uff3c\012\uff3c\013\uff3c" +
    "\014\uff3c\015\uff3c\016\uff3c\020\uff3c\021\uff3c\022\uff3c\023" +
    "\uff3c\024\uff3c\025\uff3c\033\uff3c\056\uff3c\066\uff3c\067\uff3c" +
    "\071\uff3c\001\002\000\032\005\uff44\006\uff44\007\uff44\011" +
    "\uff44\012\uff44\013\uff44\014\uff44\015\uff44\024\uff44\033\uff44" +
    "\056\uff44\071\uff44\001\002\000\004\034\051\001\002\000" +
    "\052\005\uff38\006\uff38\007\uff38\011\uff38\012\uff38\013\uff38" +
    "\014\uff38\015\uff38\016\uff38\020\uff38\021\uff38\022\uff38\023" +
    "\uff38\024\uff38\025\uff38\033\uff38\056\uff38\066\uff38\067\uff38" +
    "\071\uff38\001\002\000\052\005\uff3d\006\uff3d\007\uff3d\011" +
    "\uff3d\012\uff3d\013\uff3d\014\uff3d\015\uff3d\016\uff3d\020\uff3d" +
    "\021\uff3d\022\uff3d\023\uff3d\024\uff3d\025\uff3d\033\uff3d\056" +
    "\uff3d\066\uff3d\067\uff3d\071\uff3d\001\002\000\032\005\uff45" +
    "\006\uff45\007\uff45\011\uff45\012\uff45\013\uff45\014\uff45\015" +
    "\uff45\024\uff45\033\uff45\056\uff45\071\uff45\001\002\000\032" +
    "\005\uff46\006\uff46\007\uff46\011\uff46\012\uff46\013\uff46\014" +
    "\uff46\015\uff46\024\uff46\033\uff46\056\uff46\071\uff46\001\002" +
    "\000\052\005\uff3e\006\uff3e\007\uff3e\011\uff3e\012\uff3e\013" +
    "\uff3e\014\uff3e\015\uff3e\016\uff3e\020\uff3e\021\uff3e\022\uff3e" +
    "\023\uff3e\024\uff3e\025\uff3e\033\uff3e\056\uff3e\066\uff3e\067" +
    "\uff3e\071\uff3e\001\002\000\004\002\001\001\002\000\004" +
    "\002\000\001\002\000\006\003\u0176\030\u0174\001\002\000" +
    "\014\002\ufffd\003\ufffd\004\ufffd\005\ufffd\010\ufffd\001\002" +
    "\000\014\002\ufffa\003\ufffa\004\ufffa\005\ufffa\010\ufffa\001" +
    "\002\000\010\003\u0179\040\u017a\056\u0177\001\002\000\014" +
    "\002\ufffb\003\ufffb\004\ufffb\005\ufffb\010\ufffb\001\002\000" +
    "\014\002\ufff8\003\ufff8\004\ufff8\005\ufff8\010\ufff8\001\002" +
    "\000\010\003\u0176\027\u017f\030\u0174\001\002\000\014\002" +
    "\ufff9\003\ufff9\004\ufff9\005\ufff9\010\ufff9\001\002\000\014" +
    "\002\ufff5\003\ufff5\004\ufff5\005\ufff5\010\ufff5\001\002\000" +
    "\006\003\u017c\027\u017d\001\002\000\014\002\ufff7\003\ufff7" +
    "\004\ufff7\005\ufff7\010\ufff7\001\002\000\014\002\ufff3\003" +
    "\ufff3\004\ufff3\005\ufff3\010\ufff3\001\002\000\014\002\ufff4" +
    "\003\ufff4\004\ufff4\005\ufff4\010\ufff4\001\002\000\014\002" +
    "\ufff1\003\ufff1\004\ufff1\005\ufff1\010\ufff1\001\002\000\014" +
    "\002\ufff2\003\ufff2\004\ufff2\005\ufff2\010\ufff2\001\002\000" +
    "\014\002\ufff6\003\ufff6\004\ufff6\005\ufff6\010\ufff6\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\012\002\005\140\011\141\007\147\006\001" +
    "\001\000\004\003\u0171\001\001\000\002\001\001\000\012" +
    "\002\005\140\011\141\007\147\u016f\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\142\016\001\001\000\002" +
    "\001\001\000\004\141\013\001\001\000\002\001\001\000" +
    "\004\143\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\035\011" +
    "\034\012\032\144\037\145\040\001\001\000\004\013\u016d" +
    "\001\001\000\010\011\034\012\032\145\u016c\001\001\000" +
    "\010\011\034\012\032\145\u016b\001\001\000\004\013\u016a" +
    "\001\001\000\002\001\001\000\010\011\034\012\032\145" +
    "\u0167\001\001\000\004\013\u0166\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0165\001\001\000\002\001" +
    "\001\000\014\010\035\011\034\012\032\144\u0164\145\040" +
    "\001\001\000\006\013\213\132\u0155\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0154\001\001\000\004" +
    "\013\045\001\001\000\010\014\051\124\054\146\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\350" +
    "\016\u0152\001\001\000\002\001\001\000\010\021\064\024" +
    "\060\125\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0151\001" +
    "\001\000\004\022\u0150\001\001\000\002\001\001\000\004" +
    "\126\102\001\001\000\004\022\100\001\001\000\004\022" +
    "\077\001\001\000\004\022\076\001\001\000\006\021\064" +
    "\024\075\001\001\000\002\001\001\000\004\022\070\001" +
    "\001\000\004\023\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\127\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\012\125\017\110\025\106\051\122\052\123\061\111\072" +
    "\117\105\126\130\116\001\001\000\022\012\125\017\110" +
    "\025\106\051\u014f\052\123\061\111\072\117\105\126\001" +
    "\001\000\004\053\u013f\001\001\000\022\012\125\017\110" +
    "\025\106\051\u013d\052\123\061\111\072\117\105\126\001" +
    "\001\000\022\012\125\017\110\025\106\051\u013c\052\123" +
    "\061\111\072\117\105\126\001\001\000\004\106\u0115\001" +
    "\001\000\004\026\373\001\001\000\006\013\213\020\342" +
    "\001\001\000\004\062\216\001\001\000\002\001\001\000" +
    "\022\012\125\017\110\025\106\051\214\052\123\061\111" +
    "\072\117\105\126\001\001\000\002\001\001\000\004\012" +
    "\212\001\001\000\004\131\207\001\001\000\022\012\125" +
    "\017\110\025\106\051\206\052\123\061\111\072\117\105" +
    "\126\001\001\000\004\073\130\001\001\000\002\001\001" +
    "\000\022\012\125\017\110\025\106\051\127\052\123\061" +
    "\111\072\117\105\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\125\017\136\074" +
    "\134\101\133\001\001\000\004\075\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\140\001\001\000\006\102\153\104\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\102\171\104" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\102\170\104\151\001\001\000\006\102" +
    "\167\104\151\001\001\000\004\103\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\102" +
    "\166\104\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\076\200\001\001\000\002\001\001\000\024\012\125\017" +
    "\110\025\106\051\203\052\123\061\111\072\117\077\201" +
    "\105\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\100\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\012\125\017\110\025\106\051\222" +
    "\052\123\061\111\063\220\072\117\105\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\223\001\001" +
    "\000\002\001\001\000\004\065\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\034\246\037\244\040" +
    "\243\041\242\042\254\047\236\067\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\335\001\001\000\006\034\323\036\322\001\001\000\002" +
    "\001\001\000\004\050\310\001\001\000\004\050\275\001" +
    "\001\000\004\035\271\001\001\000\004\035\263\001\001" +
    "\000\002\001\001\000\004\035\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\034\246\037\257\040\256" +
    "\041\255\042\254\047\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\275\001\001" +
    "\000\004\035\271\001\001\000\004\035\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\034\246\037\244" +
    "\040\243\041\242\042\254\047\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\034\246\037\244\040\243" +
    "\041\242\042\254\047\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\306\042\254\001\001\000\006\041\305\042\254\001" +
    "\001\000\006\041\304\042\254\001\001\000\006\041\303" +
    "\042\254\001\001\000\006\041\300\042\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\302\042\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\317\042\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\332\001\001\000\004" +
    "\035\331\001\001\000\020\034\246\036\325\037\244\040" +
    "\243\041\242\042\254\047\260\001\001\000\002\001\001" +
    "\000\004\050\310\001\001\000\020\034\246\036\325\037" +
    "\257\040\256\041\255\042\254\047\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\337\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\350\016\346\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\350\016\356\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\350" +
    "\016\367\001\001\000\002\001\001\000\006\015\350\016" +
    "\366\001\001\000\006\015\350\016\365\001\001\000\006" +
    "\015\350\016\364\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\027\374\034\246\037\244\040" +
    "\243\041\242\042\254\047\375\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\u0101\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\u0103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\012" +
    "\125\017\110\025\106\032\u0105\051\u0107\052\123\061\111" +
    "\072\117\105\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\u0108\001\001\000\002\001\001\000\004" +
    "\043\u010b\001\001\000\004\044\u010d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\012\125" +
    "\017\110\025\106\045\u0111\051\u0110\052\123\061\111\072" +
    "\117\105\126\001\001\000\002\001\001\000\004\046\u0112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\107\u0118" +
    "\001\001\000\004\110\u011a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\111\u011d\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\112\u0126\113\u0125\122\u0122\001\001\000\004\123\u0138" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\u0127\114\u0129\115\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\113\u0136\122\u0122\001\001\000\004\116\u012c" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\012" +
    "\125\017\110\025\106\051\u0130\052\123\061\111\072\117" +
    "\105\126\117\u012e\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\120\u0132\001\001\000\004\121\u0134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\125\017\110\025" +
    "\106\051\u013b\052\123\061\111\072\117\105\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\034\246\037\244" +
    "\040\243\041\242\042\254\047\u0141\054\u0143\001\001\000" +
    "\004\055\u0144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\u0147\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\012\125" +
    "\017\110\025\106\051\u014c\052\123\057\u014a\061\111\072" +
    "\117\105\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\u014d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\064\024\u0158\133\u0157\001\001" +
    "\000\002\001\001\000\004\134\u015a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\135\u015d\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\012\125\017\110\025" +
    "\106\051\u0160\052\123\061\111\072\117\105\126\136\u0161" +
    "\001\001\000\002\001\001\000\004\137\u0163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\124\u0169\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u0174" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\u0177\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\u017d\007\u017f\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u017a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico: " + s.value.toString() + " Linea:" + s.right + " Columna:" + s.left);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("No se pudo recuperar el analizador. Linea:" + s.right + " Columna:" + s.left);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s0 ::= s1 s0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s0 ::= s95 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s0 ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s1 ::= IMPORT s2 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s1 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba mas import o class");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s2 ::= ID s3 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s2 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s3 ::= PUNTO s4 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // s3 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un punto, punto coma, o el import es muy corto Ej: import pack;");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // s4 ::= POR s5 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1 + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s4 ::= ID s6 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1 + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s4 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba * o id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s5 ::= P_COMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s5",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // s5 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un punto y coma");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s5",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // s6 ::= P_COMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s6",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s6 ::= s3 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s6",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s12 ::= FINAL s9 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1+" "+v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s12",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // s12 ::= s9 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s12",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // s12 ::= ID s13 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1+" "+v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s12",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // s13 ::= ASIGNACION exp P_COMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2 + " " + v3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s13",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametro ::= s14 parametro 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametro ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // s14 ::= INT s15 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // s14 ::= BOOLEAN s15 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // s14 ::= STRING s15 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // s14 ::= CHAR s15 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // s14 ::= DOUBLE s15 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // s14 ::= ID s15 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // s15 ::= ID s16 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s15",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // s15 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s15",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // s16 ::= COMA s14 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s16",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // s16 ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s16",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // s17 ::= IF s18 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s17",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // s18 ::= PARENTESIS_A s19 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s18",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // s18 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba ( ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s18",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // s19 ::= condicion s20 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s19",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // s19 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba una condicion valida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s19",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= NOT s24 s25 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicion ::= s24 s25 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicion ::= NOT s26 s25 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicion ::= s27 s25 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicion ::= s28 s25 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // s25 ::= AND condicion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s25",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // s25 ::= OR condicion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s25",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // s25 ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s25",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // s28 ::= s29 opcompa s29 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s28",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // s28 ::= PARENTESIS_A s28 PARENTESIS_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s28",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // s26 ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s26",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // s26 ::= PARENTESIS_A s26 PARENTESIS_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s26",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // s27 ::= ID opcompa s29 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s27",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // s27 ::= ID opcompa ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s27",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // s27 ::= ID IGUAL TRUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s27",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // s27 ::= ID IGUAL FALSE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s27",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // s27 ::= ID DIFERENTE TRUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s27",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // s27 ::= ID DIFERENTE FALSE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s27",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // s27 ::= PARENTESIS_A s27 PARENTESIS_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s27",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // s24 ::= TRUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s24",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // s24 ::= FALSE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s24",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // s24 ::= PARENTESIS_A condicion PARENTESIS_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s24",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // s20 ::= PARENTESIS_C s21 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s20",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // s20 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba el ) ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s20",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // s21 ::= LLAVE_A s22 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // s21 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba { ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // s22 ::= sentences s23 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s22",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // s22 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban las sentencias o } ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s22",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentences ::= s17 sentences 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentences ::= s35 sentences 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentences ::= s42 sentences 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentences ::= s51 sentences 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentences ::= s62 sentences 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentences ::= s12 sentences 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentences ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // s23 ::= LLAVE_C s31 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s23",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // opcompa ::= DIFERENTE 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcompa",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // opcompa ::= MAYOR_IGUAL 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcompa",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // opcompa ::= MAYOR_QUE 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcompa",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // opcompa ::= MENOR_IGUAL 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcompa",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // opcompa ::= MENOR_QUE 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcompa",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // opcompa ::= IGUAL 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcompa",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // s29 ::= s29 MAS s29 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1 + "+" + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s29",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // s29 ::= s29 MENOS s29 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1 + "-" + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s29",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // s29 ::= s29 POR s29 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1 + "*" + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s29",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // s29 ::= s29 DIVISION s29 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1 + "/" + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s29",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // s29 ::= PARENTESIS_A s29 PARENTESIS_C 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1+v2+v3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s29",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // s29 ::= s30 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s29",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // s30 ::= CADENA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s30",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // s30 ::= CARACTER 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s30",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // s30 ::= NULL 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s30",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // s30 ::= ENTERO 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s30",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // s30 ::= DECIMAL 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s30",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // s31 ::= ELSE s32 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s31",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // s31 ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s31",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // s32 ::= LLAVE_A s33 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s32",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // s32 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba { ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s32",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // s33 ::= sentences s34 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s33",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // s33 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban las sentencias o } ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s33",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // s34 ::= LLAVE_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s34",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // s35 ::= WHILE s36 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s35",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // s36 ::= PARENTESIS_A s37 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s36",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // s36 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba ( ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s36",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // s37 ::= condicion s38 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s37",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // s37 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba una condicion valida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s37",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // s38 ::= PARENTESIS_C s39 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s38",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // s38 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba ) ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s38",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // s39 ::= LLAVE_A s40 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s39",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // s39 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba { ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s39",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // s40 ::= sentences s41 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s40",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // s40 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban las sentencias o } ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s40",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // s41 ::= LLAVE_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s41",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // s42 ::= DO s43 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s42",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // s43 ::= LLAVE_A s44 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s43",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // s43 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba { ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s43",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // s44 ::= sentences s45 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s44",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // s44 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban las sentencias o } ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s44",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // s45 ::= LLAVE_C s46 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s45",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // s46 ::= WHILE s47 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s46",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // s46 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba while ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s46",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // s47 ::= PARENTESIS_A s48 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s47",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // s47 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba ( ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s47",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // s48 ::= condicion s49 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s48",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // s48 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba una condicion valida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s48",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // s49 ::= PARENTESIS_C s50 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s49",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // s49 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba ) ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s49",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // s50 ::= P_COMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s50",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // s50 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba el ; ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s50",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // s51 ::= FOR s52 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s51",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // s52 ::= PARENTESIS_A s53 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s52",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // s52 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba ( ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s52",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // s53 ::= s58 s54 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s53",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // s53 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba unos limites validos");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s53",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // s54 ::= PARENTESIS_C s55 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s54",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // s54 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba ) ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s54",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // s55 ::= LLAVE_A s56 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s55",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // s55 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba {");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s55",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // s56 ::= sentences s57 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s56",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // s56 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban las sentencias o } ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s56",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // s57 ::= LLAVE_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s57",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // s58 ::= s12 ID opcompa s59 P_COMA s60 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s58",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // s60 ::= ID INCREMENTO 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1+" "+v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s60",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // s60 ::= ID DECREMENTO 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1+" "+v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s60",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // s60 ::= ID ASIGNACION s59 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1+" "+v2+" "+v3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s60",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // s59 ::= s59 MAS s59 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1 + "+" + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s59",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // s59 ::= s59 MENOS s59 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1 + "/" + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s59",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // s59 ::= PARENTESIS_A s59 PARENTESIS_C 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1+v2+v3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s59",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // s59 ::= s61 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s59",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // s59 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un valor");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s59",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // s61 ::= ID 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s61",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // s61 ::= ENTERO 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s61",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // s61 ::= DECIMAL 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s61",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // s62 ::= SWITCH s63 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s62",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // s63 ::= PARENTESIS_A s64 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s63",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // s63 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s63",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // s64 ::= ID s65 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s64",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // s64 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s64",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // s65 ::= PARENTESIS_C s66 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s65",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // s65 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba )");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s65",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // s66 ::= LLAVE_A s67 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s66",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // s66 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba {");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s66",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // s67 ::= s68 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s67",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // s67 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban los casos o }");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s67",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // s68 ::= CASE s69 s68 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s68",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // s68 ::= s75 LLAVE_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s68",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // s68 ::= LLAVE_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s68",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // s69 ::= s70 s71 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s69",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // s70 ::= valor 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s70",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // s70 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un valor");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s70",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // s71 ::= DOS_PUNTOS s72 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s71",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // s71 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban dos puntos");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s71",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // s72 ::= sentences s73 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s72",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // s72 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban las sentencias,case,break,default o }");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s72",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // s73 ::= BREAK s74 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s73",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // s73 ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s73",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // s74 ::= P_COMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s74",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // s74 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba punto y coma");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s74",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // s75 ::= DEFAULT s76 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s75",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // s76 ::= DOS_PUNTOS sentences 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s76",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // s76 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba dos puntos");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s76",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // s95 ::= PUBLIC s96 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s95",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // s95 ::= s96 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s95",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // s96 ::= CLASS s97 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s96",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // s97 ::= ID s98 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s97",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // s97 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba el nombre de la clase");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s97",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // s98 ::= LLAVE_A s99 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s98",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // s98 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba {");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s98",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // s99 ::= s7 s99 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s99",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // s99 ::= LLAVE_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s99",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // s7 ::= PUBLIC s101 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s7",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // s7 ::= PRIVATED s101 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s7",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // s7 ::= PROTECTED s101 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s7",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // s7 ::= s101 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s7",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // s101 ::= s8 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s101",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // s101 ::= ID s89 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s101",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // s8 ::= FINAL s9 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s8",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // s8 ::= s9 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s8",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // s9 ::= INT s10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // s9 ::= BOOLEAN s10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // s9 ::= STRING s10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // s9 ::= CHAR s10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // s9 ::= DOUBLE s10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // s9 ::= ID s10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // s9 ::= VOID ID s81 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // s10 ::= ID s104 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // s10 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un identificador");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // s104 ::= s11 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s104",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // s104 ::= s81 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s104",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // s11 ::= P_COMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // s11 ::= ASIGNACION exp P_COMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // s11 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba punto y coma, signo igual o (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // exp ::= exp MAS exp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // exp ::= exp MENOS exp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // exp ::= exp POR exp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // exp ::= exp DIVISION exp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // exp ::= PARENTESIS_A exp PARENTESIS_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // exp ::= valor 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // exp ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un valor");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // valor ::= CADENA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // valor ::= TRUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // valor ::= FALSE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // valor ::= CARACTER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // valor ::= NULL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // valor ::= ENTERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // valor ::= DECIMAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // s81 ::= PARENTESIS_A s82 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s81",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // s82 ::= parametro s83 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s82",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // s82 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban los parametros o ) ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s82",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // s83 ::= PARENTESIS_C s84 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s83",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // s84 ::= LLAVE_A s85 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s84",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // s84 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba {");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s84",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // s85 ::= sentences s86 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s85",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // s85 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban las sentencias o } ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s85",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // s86 ::= LLAVE_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s86",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // s89 ::= PARENTESIS_A s90 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s89",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // s90 ::= parametro s91 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s90",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // s90 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban los parametros o ) ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s90",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // s91 ::= PARENTESIS_C s92 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s91",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // s92 ::= LLAVE_A s93 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s92",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // s92 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba { ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s92",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // s93 ::= sentences s94 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s93",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // s93 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban las sentencias o } cons ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s93",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // s94 ::= LLAVE_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s94",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
