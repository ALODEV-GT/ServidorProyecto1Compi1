
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package midik.cup;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\161\004\000\002\161" +
    "\003\000\002\161\002\000\002\002\004\000\002\002\003" +
    "\000\002\003\004\000\002\003\003\000\002\004\004\000" +
    "\002\004\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\003\000\002\007\003\000\002\025\004\000\002\025\002" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\023\004\000\002\023\003\000\002\024\004\000\002\024" +
    "\002\000\002\052\004\000\002\052\002\000\002\147\004" +
    "\000\002\147\003\000\002\150\004\000\002\151\004\000" +
    "\002\151\003\000\002\152\004\000\002\152\003\000\002" +
    "\153\004\000\002\153\003\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\003\000\002\155\003" +
    "\000\002\155\004\000\002\012\004\000\002\012\003\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\005\000\002\013\003\000\002\014\004\000\002\014\003" +
    "\000\002\160\003\000\002\160\003\000\002\015\003\000" +
    "\002\015\005\000\002\015\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\003\000\002\017\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\131\004\000\002\132\004\000\002\132\003\000\002\133" +
    "\004\000\002\134\004\000\002\134\003\000\002\135\004" +
    "\000\002\135\003\000\002\136\003\000\002\141\004\000" +
    "\002\142\004\000\002\142\003\000\002\143\004\000\002" +
    "\144\004\000\002\144\003\000\002\145\004\000\002\145" +
    "\003\000\002\146\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\014\002\ufffe\003\005\004\004\005\013\010" +
    "\011\001\002\000\006\003\207\056\205\001\002\000\014" +
    "\002\ufffc\003\ufffc\004\ufffc\005\ufffc\010\ufffc\001\002\000" +
    "\014\002\ufffe\003\005\004\004\005\013\010\011\001\002" +
    "\000\004\002\203\001\002\000\004\002\uffe1\001\002\000" +
    "\006\003\016\056\015\001\002\000\004\002\uffff\001\002" +
    "\000\004\010\011\001\002\000\004\002\uffe2\001\002\000" +
    "\006\003\020\032\022\001\002\000\004\002\uffde\001\002" +
    "\000\004\002\uffe0\001\002\000\004\002\uffdc\001\002\000" +
    "\004\002\uffdf\001\002\000\034\003\034\005\026\006\035" +
    "\007\032\011\023\012\027\013\030\014\044\015\024\024" +
    "\033\033\036\056\025\071\040\001\002\000\006\003\046" +
    "\056\045\001\002\000\006\003\046\056\045\001\002\000" +
    "\010\003\046\034\163\056\045\001\002\000\024\003\034" +
    "\011\023\012\027\013\030\014\044\015\024\024\033\056" +
    "\025\071\040\001\002\000\006\003\046\056\045\001\002" +
    "\000\006\003\046\056\045\001\002\000\034\003\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\024\uffd6\033\uffd6\056\uffd6\071\uffd6\001\002\000" +
    "\024\003\034\011\023\012\027\013\030\014\044\015\024" +
    "\024\033\056\025\071\040\001\002\000\022\003\034\011" +
    "\023\012\027\013\030\014\044\015\024\056\154\071\040" +
    "\001\002\000\034\003\uffca\005\uffca\006\uffca\007\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\024\uffca\033\uffca" +
    "\056\uffca\071\uffca\001\002\000\024\003\034\011\023\012" +
    "\027\013\030\014\044\015\024\024\033\056\025\071\040" +
    "\001\002\000\004\002\uffda\001\002\000\004\002\uffdd\001" +
    "\002\000\004\056\150\001\002\000\034\003\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\024\uffd2\033\uffd2\056\uffd2\071\uffd2\001\002\000\034" +
    "\003\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\024\uffd5\033\uffd5\056\uffd5\071\uffd5" +
    "\001\002\000\034\003\034\005\026\006\035\007\032\011" +
    "\023\012\027\013\030\014\044\015\024\024\033\033\036" +
    "\056\025\071\040\001\002\000\006\003\046\056\045\001" +
    "\002\000\012\003\051\027\055\034\052\045\050\001\002" +
    "\000\034\003\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\024\uffc8\033\uffc8\056\uffc8" +
    "\071\uffc8\001\002\000\034\003\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\024\uffcd" +
    "\033\uffcd\056\uffcd\071\uffcd\001\002\000\024\003\131\034" +
    "\132\057\123\060\122\061\121\062\125\063\130\064\133" +
    "\065\127\001\002\000\034\003\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\024\uffc3" +
    "\033\uffc3\056\uffc3\071\uffc3\001\002\000\022\003\067\011" +
    "\057\012\060\013\063\014\064\015\070\035\uffef\056\065" +
    "\001\002\000\034\003\uffc7\005\uffc7\006\uffc7\007\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\024\uffc7\033\uffc7" +
    "\056\uffc7\071\uffc7\001\002\000\034\003\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\024\uffc9\033\uffc9\056\uffc9\071\uffc9\001\002\000\034\003" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\024\uffc5\033\uffc5\056\uffc5\071\uffc5\001" +
    "\002\000\034\003\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\015\uffc6\024\uffc6\033\uffc6\056" +
    "\uffc6\071\uffc6\001\002\000\006\003\073\056\071\001\002" +
    "\000\006\003\073\056\071\001\002\000\034\003\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\024\uffb4\033\uffb4\056\uffb4\071\uffb4\001\002\000" +
    "\004\035\103\001\002\000\006\003\073\056\071\001\002" +
    "\000\006\003\073\056\071\001\002\000\006\003\073\056" +
    "\071\001\002\000\020\011\057\012\060\013\063\014\064" +
    "\015\070\035\uffef\056\065\001\002\000\034\003\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\024\uffb2\033\uffb2\056\uffb2\071\uffb2\001\002\000" +
    "\006\003\073\056\071\001\002\000\022\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\031\074\035\uffe5\056\uffe5\001" +
    "\002\000\020\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\035\uffeb\056\uffeb\001\002\000\020\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\035\uffe7\056\uffe7\001\002\000\016" +
    "\011\057\012\060\013\063\014\064\015\070\056\065\001" +
    "\002\000\020\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\035\uffe8\056\uffe8\001\002\000\020\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\035\uffe6\056\uffe6\001\002\000\004" +
    "\035\ufff0\001\002\000\020\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\035\uffe9\056\uffe9\001\002\000\020\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\035\uffea\056\uffea\001" +
    "\002\000\020\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\035\uffec\056\uffec\001\002\000\006\003\105\032\107\001" +
    "\002\000\034\003\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\024\uffb3\033\uffb3\056" +
    "\uffb3\071\uffb3\001\002\000\034\003\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\024" +
    "\uffaf\033\uffaf\056\uffaf\071\uffaf\001\002\000\034\003\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\011\uffb1\012\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\024\uffb1\033\uffb1\056\uffb1\071\uffb1\001\002" +
    "\000\010\003\112\033\uffe3\056\110\001\002\000\004\027" +
    "\116\001\002\000\004\033\115\001\002\000\034\003\uffad" +
    "\005\uffad\006\uffad\007\uffad\011\uffad\012\uffad\013\uffad\014" +
    "\uffad\015\uffad\024\uffad\033\uffad\056\uffad\071\uffad\001\002" +
    "\000\034\003\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\024\uffb0\033\uffb0\056\uffb0" +
    "\071\uffb0\001\002\000\034\003\uffae\005\uffae\006\uffae\007" +
    "\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\024\uffae" +
    "\033\uffae\056\uffae\071\uffae\001\002\000\034\003\uffac\005" +
    "\uffac\006\uffac\007\uffac\011\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\024\uffac\033\uffac\056\uffac\071\uffac\001\002\000" +
    "\004\033\uffe4\001\002\000\020\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\035\uffed\056\uffed\001\002\000\020\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\035\uffee\056\uffee" +
    "\001\002\000\016\027\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\001\002\000\016\027\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\001\002\000\016\027\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\001\002\000\014" +
    "\027\146\036\135\037\140\040\141\041\137\001\002\000" +
    "\016\027\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\001\002\000\016\027\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\001\002\000\016\027\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\001\002\000\016\027\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\001\002\000\016" +
    "\027\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\001" +
    "\002\000\024\003\131\034\132\057\123\060\122\061\121" +
    "\062\125\063\130\064\133\065\127\001\002\000\016\027" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\001\002" +
    "\000\014\035\136\036\135\037\140\040\141\041\137\001" +
    "\002\000\024\003\131\034\132\057\123\060\122\061\121" +
    "\062\125\063\130\064\133\065\127\001\002\000\016\027" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\001\002" +
    "\000\024\003\131\034\132\057\123\060\122\061\121\062" +
    "\125\063\130\064\133\065\127\001\002\000\024\003\131" +
    "\034\132\057\123\060\122\061\121\062\125\063\130\064" +
    "\133\065\127\001\002\000\024\003\131\034\132\057\123" +
    "\060\122\061\121\062\125\063\130\064\133\065\127\001" +
    "\002\000\016\027\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\001\002\000\016\027\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\141\041\137\001\002\000\016\027\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\001\002\000\016\027" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\040\141\041\137\001\002" +
    "\000\034\003\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\024\uffc4\033\uffc4\056\uffc4" +
    "\071\uffc4\001\002\000\004\002\uffdb\001\002\000\004\034" +
    "\052\001\002\000\034\003\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\024\uffcb\033" +
    "\uffcb\056\uffcb\071\uffcb\001\002\000\034\003\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\024\uffd8\033\uffd8\056\uffd8\071\uffd8\001\002\000\034" +
    "\003\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\024\uffd3\033\uffd3\056\uffd3\071\uffd3" +
    "\001\002\000\006\003\046\056\045\001\002\000\034\003" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\024\uffcc\033\uffcc\056\uffcc\071\uffcc\001" +
    "\002\000\034\003\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\024\uffd7\033\uffd7\056" +
    "\uffd7\071\uffd7\001\002\000\034\003\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\024" +
    "\uffcf\033\uffcf\056\uffcf\071\uffcf\001\002\000\034\003\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\024\uffd0\033\uffd0\056\uffd0\071\uffd0\001\002" +
    "\000\034\003\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\024\uffd9\033\uffd9\056\uffd9" +
    "\071\uffd9\001\002\000\034\003\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\024\uffd4" +
    "\033\uffd4\056\uffd4\071\uffd4\001\002\000\022\003\166\011" +
    "\057\012\060\013\063\014\064\015\070\035\uffef\056\065" +
    "\001\002\000\034\003\uffab\005\uffab\006\uffab\007\uffab\011" +
    "\uffab\012\uffab\013\uffab\014\uffab\015\uffab\024\uffab\033\uffab" +
    "\056\uffab\071\uffab\001\002\000\004\035\170\001\002\000" +
    "\034\003\uffa9\005\uffa9\006\uffa9\007\uffa9\011\uffa9\012\uffa9" +
    "\013\uffa9\014\uffa9\015\uffa9\024\uffa9\033\uffa9\056\uffa9\071" +
    "\uffa9\001\002\000\034\003\uffaa\005\uffaa\006\uffaa\007\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\024\uffaa\033" +
    "\uffaa\056\uffaa\071\uffaa\001\002\000\006\003\171\032\173" +
    "\001\002\000\034\003\uffa6\005\uffa6\006\uffa6\007\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\024\uffa6\033\uffa6" +
    "\056\uffa6\071\uffa6\001\002\000\034\003\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\024\uffa8\033\uffa8\056\uffa8\071\uffa8\001\002\000\010\003" +
    "\175\033\uffe3\056\110\001\002\000\004\033\177\001\002" +
    "\000\034\003\uffa4\005\uffa4\006\uffa4\007\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\024\uffa4\033\uffa4\056\uffa4" +
    "\071\uffa4\001\002\000\034\003\uffa7\005\uffa7\006\uffa7\007" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\024\uffa7" +
    "\033\uffa7\056\uffa7\071\uffa7\001\002\000\034\003\uffa3\005" +
    "\uffa3\006\uffa3\007\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\024\uffa3\033\uffa3\056\uffa3\071\uffa3\001\002\000" +
    "\034\003\uffa5\005\uffa5\006\uffa5\007\uffa5\011\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\024\uffa5\033\uffa5\056\uffa5\071" +
    "\uffa5\001\002\000\034\003\uffce\005\uffce\006\uffce\007\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\024\uffce\033" +
    "\uffce\056\uffce\071\uffce\001\002\000\034\003\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\024\uffd1\033\uffd1\056\uffd1\071\uffd1\001\002\000\004" +
    "\002\001\001\002\000\004\002\000\001\002\000\006\003" +
    "\212\030\210\001\002\000\014\002\ufffd\003\ufffd\004\ufffd" +
    "\005\ufffd\010\ufffd\001\002\000\014\002\ufffa\003\ufffa\004" +
    "\ufffa\005\ufffa\010\ufffa\001\002\000\010\003\215\040\216" +
    "\056\213\001\002\000\014\002\ufffb\003\ufffb\004\ufffb\005" +
    "\ufffb\010\ufffb\001\002\000\014\002\ufff8\003\ufff8\004\ufff8" +
    "\005\ufff8\010\ufff8\001\002\000\010\003\212\027\223\030" +
    "\210\001\002\000\014\002\ufff9\003\ufff9\004\ufff9\005\ufff9" +
    "\010\ufff9\001\002\000\014\002\ufff5\003\ufff5\004\ufff5\005" +
    "\ufff5\010\ufff5\001\002\000\006\003\220\027\221\001\002" +
    "\000\014\002\ufff7\003\ufff7\004\ufff7\005\ufff7\010\ufff7\001" +
    "\002\000\014\002\ufff3\003\ufff3\004\ufff3\005\ufff3\010\ufff3" +
    "\001\002\000\014\002\ufff4\003\ufff4\004\ufff4\005\ufff4\010" +
    "\ufff4\001\002\000\014\002\ufff1\003\ufff1\004\ufff1\005\ufff1" +
    "\010\ufff1\001\002\000\014\002\ufff2\003\ufff2\004\ufff2\005" +
    "\ufff2\010\ufff2\001\002\000\014\002\ufff6\003\ufff6\004\ufff6" +
    "\005\ufff6\010\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\012\002\005\147\011\150\007\161\006\001" +
    "\001\000\004\003\205\001\001\000\002\001\001\000\012" +
    "\002\005\147\011\150\007\161\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\151\016\001\001\000\002" +
    "\001\001\000\004\150\013\001\001\000\002\001\001\000" +
    "\004\152\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\011\042\012" +
    "\041\013\040\153\036\155\030\001\001\000\004\014\201" +
    "\001\001\000\004\014\200\001\001\000\006\014\154\141" +
    "\161\001\001\000\010\012\041\013\040\155\160\001\001" +
    "\000\004\014\157\001\001\000\004\014\156\001\001\000" +
    "\002\001\001\000\010\012\041\013\040\155\155\001\001" +
    "\000\004\013\152\001\001\000\002\001\001\000\010\012" +
    "\041\013\040\155\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\042\012\041\013\040\153\146\155\030" +
    "\001\001\000\004\014\046\001\001\000\010\015\052\131" +
    "\055\160\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\125\017\123\001\001\000\002\001\001\000" +
    "\010\022\065\025\061\132\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\117\001\001\000\004\023\116\001\001\000\002" +
    "\001\001\000\004\133\103\001\001\000\004\023\101\001" +
    "\001\000\004\023\100\001\001\000\004\023\077\001\001" +
    "\000\006\022\065\025\076\001\001\000\002\001\001\000" +
    "\004\023\071\001\001\000\004\024\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\134" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\052\110\135\112\001\001\000\002\001" +
    "\001\000\004\136\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\125\017\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\125" +
    "\017\144\001\001\000\002\001\001\000\006\016\125\017" +
    "\143\001\001\000\006\016\125\017\142\001\001\000\006" +
    "\016\125\017\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\131\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\065\025\164\142\163\001\001\000\002\001" +
    "\001\000\004\143\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\144\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\052\173\145\175\001\001\000\004" +
    "\146\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\221\007\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico: " + s.value.toString() + " Linea:" + s.right + " Columna:" + s.left);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("No se pudo recuperar el analizador. Linea:" + s.right + " Columna:" + s.left);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s0 ::= s1 s0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s0 ::= s95 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s0 ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s1 ::= IMPORT s2 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s1 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba mas import o class");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s2 ::= ID s3 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s2 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s3 ::= PUNTO s4 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // s3 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un punto, punto coma, o el import es muy corto Ej: import pack;");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // s4 ::= POR s5 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1 + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s4 ::= ID s6 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1 + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s4 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba * o id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s5 ::= P_COMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s5",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // s5 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un punto y coma");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s5",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // s6 ::= P_COMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s6",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s6 ::= s3 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s6",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro ::= s14 parametro 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametro ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // s14 ::= INT s15 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // s14 ::= BOOLEAN s15 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // s14 ::= STRING s15 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // s14 ::= CHAR s15 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // s14 ::= DOUBLE s15 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // s14 ::= ID s15 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // s15 ::= ID s16 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v1 + " " + v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s15",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // s15 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s15",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // s16 ::= COMA s14 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s16",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // s16 ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s16",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentences ::= ID P_COMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentences ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // s95 ::= PUBLIC s96 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s95",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // s95 ::= s96 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s95",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // s96 ::= CLASS s97 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s96",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // s97 ::= ID s98 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s97",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // s97 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba el nombre de la clase");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s97",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // s98 ::= LLAVE_A s99 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s98",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // s98 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba {");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s98",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // s99 ::= s7 s99 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s99",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // s99 ::= LLAVE_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s99",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // s7 ::= PUBLIC s101 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // s7 ::= PRIVATED s101 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // s7 ::= PROTECTED s101 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // s7 ::= s101 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // s101 ::= s8 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s101",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // s101 ::= ID s89 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s101",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // s8 ::= FINAL s9 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // s8 ::= s9 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // s9 ::= INT s10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // s9 ::= BOOLEAN s10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // s9 ::= STRING s10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // s9 ::= CHAR s10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // s9 ::= DOUBLE s10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // s9 ::= ID s10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // s9 ::= VOID ID s81 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // s9 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba el tipo de dato");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // s10 ::= ID s104 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // s10 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un identificador");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // s104 ::= s11 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s104",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // s104 ::= s81 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s104",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // s11 ::= P_COMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // s11 ::= ASIGNACION exp P_COMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // s11 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba punto y coma, signo igual o (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= exp MAS exp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= exp MENOS exp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= exp POR exp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= exp DIVISION exp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= PARENTESIS_A exp PARENTESIS_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= valor 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba un valor");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor ::= CADENA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor ::= TRUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor ::= FALSE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valor ::= CARACTER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valor ::= NULL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor ::= ENTERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor ::= DECIMAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // s81 ::= PARENTESIS_A s82 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s81",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // s82 ::= parametro s83 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s82",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // s82 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban los parametros o ) ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s82",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // s83 ::= PARENTESIS_C s84 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s83",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // s84 ::= LLAVE_A s85 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s84",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // s84 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba {");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s84",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // s85 ::= sentences s86 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s85",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // s85 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban las sentencias o } ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s85",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // s86 ::= LLAVE_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s86",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // s89 ::= PARENTESIS_A s90 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s89",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // s90 ::= parametro s91 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s90",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // s90 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban los parametros o ) ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s90",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // s91 ::= PARENTESIS_C s92 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s91",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // s92 ::= LLAVE_A s93 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s92",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // s92 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaba { ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s92",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // s93 ::= sentences s94 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s93",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // s93 ::= error 
            {
              String RESULT =null;
		System.out.println("Se esperaban las sentencias o } cons ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s93",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // s94 ::= LLAVE_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s94",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
